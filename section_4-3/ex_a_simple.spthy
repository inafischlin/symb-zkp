theory ex_a_simple 
begin

builtins: asymmetric-encryption

functions: pk/1,
           zkp/4,
           verifyZkp/2,
           trueZkp/0,
           pubParams/1
equations: verifyZkp(crs, zkp(crs, aenc(m, pk(skP)), skP, r)) = trueZkp,
           pubParams(zkp(crs, x, w, r)) = x

//----------------------------------------------------------------------------------------
// Set up public-private key pair
//----------------------------------------------------------------------------------------

rule generate_asymKeyPair:
	[ Fr(~skA) ]
  --[ HonestKey($A, ~skA) ]->
	[ !SecretKey($A, ~skA), !PubKey($A, pk(~skA)) ]
  
rule get_pubKey:
	[ !PubKey(A, pk(skA)) ]
  -->
	[ Out(pk(skA)) ]
	
rule reveal_secretKey:
	[ !SecretKey(A, skA) ]
  --[ Reveal(A) ]->
	[ Out(skA) ]

//----------------------------------------------------------------------------------------
// Generation of crs
//----------------------------------------------------------------------------------------

rule generate_crs:
    [ Fr(~crs) ]
  --[ HonestCRS(~crs) ]->
    [ Out(~crs) ]
    
//----------------------------------------------------------------------------------------
// Protocol initialization
//----------------------------------------------------------------------------------------

rule Init_P:
	[ Fr(~id),
	  !SecretKey(P, skP),
	  !PubKey(P, pk(skP)) ]
  --[ Init_P(),
      Create_P(P, ~id),
      KnowsWitness(P, skP) ]->
	[ St_P_1(P, ~id, skP, pk(skP)) ]
  
rule Init_V:
	[ Fr(~id) ]
  --[ Init_V(),
      Create_V($V, ~id) ]->
	[ St_V_1($V, ~id) ]

//----------------------------------------------------------------------------------------
// Protocol
//----------------------------------------------------------------------------------------

// 1. Prover

rule P_1:
	[ St_P_1(P, id, skP, pk(skP)),
	  Fr(~m),
	  Fr(~r),
	  In(crs) ]
  --[ CreatedZkp(P, skP, crs),
      Honest(P) ]->
	[ Out(zkp(crs, aenc(~m, pk(skP)), skP, ~r)) ]

// 2. Verifier

rule V_1:
	[ St_V_1(V, id),
	  In(crs),
	  In(zkp(crs, aenc(m, pk(skP)), skP, r)) ]
  --[ ReceivedZkp(V, id, skP, crs),
      Eq(verifyZkp(crs, zkp(crs, aenc(m, pk(skP)), skP, r)), trueZkp),
      VerifiedZkp(V, id, skP, crs),
      Finish(V, id),
      Honest(V) ]->
	[]


//----------------------------------------------------------------------------------------
// Restrictions
//----------------------------------------------------------------------------------------
  
restriction Equality:
  "All x y #i. Eq(x, y)@i ==> x = y"  

//----------------------------------------------------------------------------------------
// Lemmas
//----------------------------------------------------------------------------------------

// 0. Protocol is executable
lemma executable:
  exists-trace
    "
     // A ZKP of an honest key can be verified
       (Ex P V id #i1 #i2 #i3 #i4 skP crs. HonestCRS(crs)@i1 & HonestKey(P, skP)@i2 & CreatedZkp(P, skP, crs)@i3 & VerifiedZkp(V, id, skP, crs)@i4 & i3 < i4)
     // Both P and V are only initiated once
     & (All #i #j. Init_P()@i & Init_P()@j ==> #i = #j)
     & (All #i #j. Init_V()@i & Init_V()@j ==> #i = #j)
     // Protocol is executed between two parties
     & (Ex A B idA idB #i #j. Create_P(A, idA)@i & Create_V(B, idB)@j & not A=B)
     // The secret key of P was not compromised
     & not (Ex A idA #i #j. Create_P(A, idA)@i & Reveal(A)@j)
    "

// 1. Soundness: P cannot trick V into verifying a false statement
lemma soundness:
  "
    All V id #i1 #i2 w crs.
      VerifiedZkp(V, id, w, crs)@i1 & HonestCRS(crs)@i2
        ==> ( Ex P #i. KnowsWitness(P, w)@i )
          | ( Ex P #i. Reveal(P)@i )
          | ( Ex #i. KU(w)@i )
  " 

// 2. Completeness: V will always verify a true statement
lemma completeness:
  "
    All V id w crs #i1 #i2 #i3.
    ( Ex P #i. KnowsWitness(P, w)@i )
      & ReceivedZkp(V, id, w, crs)@i1 & HonestCRS(crs)@i2 & Finish(V, id)@i3
      ==> ( Ex #j. VerifiedZkp(V, id, w, crs)@j )
  "

// 3. Zero-knowledge
lemma zero_knowledge:
  "
    not(
      Ex P w crs #i1 #i2 #i3.
          HonestCRS(crs)@i1
        & CreatedZkp(P, w, crs)@i2
        & K(w)@i3
        & not (Ex #j. Reveal(P)@j)
    )
  "

end
